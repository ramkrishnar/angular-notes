declare routes
app.module.ts

const approute:Routes=[{path:'',component:CockpitComponent},
{path:'server', component:UsersComponent},
{path:'Address/:id/:name', component:UsersComponent}, // : indicates dynamically pass the data
{path:'Address', component:AngularcurdComponent},
]

in import section register approutes in RouterModule.forRoot() method by this declaration  angular  know which routers registred
RouterModule.forRoot(approute);


app.component.html:
--------------------
<ul class="nav nav-tabs">
            <li role="presentation" 
            ><a routerLink='/' routerLinkActive="active">Cockpit</a></li>
            <li role="presentation"><a routerLink="/server" routerLinkActive="active" >server</a></li>
            <li role="presentation"><a [routerLink]="['/Address']" routerLinkActive="active">Address</a></li>
        </ul>
        routerLink:
        -----------
The directive for binding a clickable HTML element to a route. Clicking an element with 
a routerLink directive that is bound to a string or a link parameters array triggers a navigation.

routerLinkActive:
-----------------
The directive for adding/removing classes from an HTML element when an associated routerLink 
contained on or inside the element becomes active/inactive.


router:
-------
used to navgiate the urls through programitically

ex:-
constructor(private router:Router) { }
user:{id:number,name:string}
 
reload(){
this.router.navigate(['/Address'])
}


ActivatedRoute:
----------------
  used to access data from urls
  
 constructor(private route:ActivatedRoute) { }
user:{id:number,name:string}
  ngOnInit() {
    this.user={id:this.route.snapshot.params['id'],name:this.route.snapshot.params['name']}
  }

<p>user with id {{user.id}}</p><br>
<p>user with name {{user.name}}</p>

query params:
--------------

<a [routerLink]="['/Address',5,'edit']" 
[queryParams]="{allowedit:5}"
 [fragment]="loading"
>loadServer</a>
o/p:
http://localhost:4200/Address/5/edit?allowedit=5

Access queryparams:
--------------------
constructor(private route:ActivteRoute){}
console.log(this.route.snapshot.queryParams)//{allowedit:1}
this.route.queryParams.subscribe((param:Params)=>{
console.log(this.route.snapshot.queryParams)})//reactive Apporach

child routes:
--------------
declare childern propertie in particular parent router and <router-outlet> tag declare in parent template

const approute:Routes=[{path:'',component:CockpitComponent},
{path:'server', component:UsersComponent},

{path:'Address', component:AngularcurdComponent, children:[
  {path:':id/:name', component:UsersComponent}
]},
]

AngularcurdComponent.html

<router-outlet> </router-outlet>

wildcard routes and redirectTo :
-----------------
const approute:Routes=[{path:'',component:CockpitComponent},
{path:'server', component:UsersComponent},

{path:'Address', component:AngularcurdComponent, children:[
  {path:':id/:name', component:UsersComponent}
]},
{path:'not-found' ,component:PageNotFoundComponent},
{path:'**',redirectTo:'/not-found'}
]

route gurds:
As the name implies CanActivate guard determines if a route can be activated.
There are several use cases for CanActivate guard. 

1. We can use it to check if the user is authenticated before allowing him to access protected areas of the application.
If he is not authenticated, we redirect him to AccessDenied component or Login component.

2. Similarly we can use it to check, if a specific resource he is looking for exists. 
if the resource does not exist we redirect him to the PageNotFound component. If the resource exists,
we redirect the user to navigate the resource.








































